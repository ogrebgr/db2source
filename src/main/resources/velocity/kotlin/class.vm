package fix me

import com.bolyartech.forge.server.db.setValue
import java.sql.Connection
import java.sql.SQLException
import java.sql.Statement
import java.sql.ResultSet
#if ($addDependencyInjectionCode)import javax.inject.Inject#end

#if ($hasIdColumn)
#set($int = "INT")
#if ($createValueClassForId)
#if ($idColumnType == $int)
@JvmInline
value class ${class_name}Id(val value: Int) {
    companion object {
        val NOT_INITIALIZED = ${class_name}Id(-1)
    }
}
#else
value class ${class_name}Id(val value: Long) {
    companion object {
        val NOT_INITIALIZED = ${class_name}Id(-1L)
    }
}
#end
#end
#end

data class $class_name(
#foreach ($field in $fields)
    #if($field.codeName != "id")
    val $field.codeName: #include("${_dir}${field.type}.vm")#if(${field.izNullable})?#end#if( $foreach.hasNext ), #end
    #else
    val $field.codeName: #if ($createValueClassForId)${class_name}Id#else#if ($idColumnType == $int)Int#{else}Long#end#end#if( $foreach.hasNext ), #end
    #end

#end
)

// TODO add provider to Dagger DI
interface ${class_name}Dbh {
    @Throws(SQLException::class)
    fun createNew(dbc: Connection, #foreach ($field in $fields)#if($field.codeName != "id")$field.codeName: #include("${_dir}${field.type}.vm")#if(${field.izNullable})?#end#if( $foreach.hasNext ), #end#end#end) : $class_name
#if ($hasIdColumn)
#set($int = "INT")
@Throws(SQLException::class)
    fun loadById(dbc: Connection, id: #if ($createValueClassForId)${class_name}Id#else#if ($idColumnType == $int)Int#{else}Long#end#end) : $class_name?
#end
    @Throws(SQLException::class)
    fun loadAll(dbc: Connection) : List<$class_name>
#if ($hasIdColumn)

    @Throws(SQLException::class)
    fun update(dbc: Connection, #foreach ($field in $fields)#if($field.codeName != "id")$field.codeName: #include("${_dir}${field.type}.vm")#if(${field.izNullable})?#end#if( $foreach.hasNext ), #end#end#end, id: #if ($createValueClassForId)${class_name}Id#else#if ($idColumnType == $int)Int#{else}Long#end#end) : $class_name?

#if ($addPaginationMethods)
    @Throws(SQLException::class)
    fun loadPageIdGreater(dbc: Connection, idGreater: #if ($createValueClassForId)${class_name}Id#else#if ($idColumnType == $int)Int#{else}Long#end#end, pageSize: Int): List<$class_name>

    @Throws(SQLException::class)
    fun loadPageIdLower(dbc: Connection, idLower: #if ($createValueClassForId)${class_name}Id#else#if ($idColumnType == $int)Int#{else}Long#end#end, pageSize: Int): List<$class_name>

    @Throws(SQLException::class)
    fun loadLastPage(dbc: Connection, pageSize: Int): List<$class_name>
#end

    @Throws(SQLException::class)
    fun count(dbc: Connection) : Int

    @Throws(SQLException::class)
    fun delete(dbc: Connection, id: #if ($createValueClassForId)${class_name}Id#else#if ($idColumnType == $int)Int#{else}Long#end#end) : Int

#end
    @Throws(SQLException::class)
    fun deleteAll(dbc: Connection) : Int
}

class ${class_name}DbhImpl #if ($addDependencyInjectionCode)@Inject constructor()#end: ${class_name}Dbh{
    companion object {
        private const val SQL_INSERT = """INSERT INTO "$table_name" (#foreach ($field in $fields)#if($field.name != "id")"$field.name"#if( $foreach.hasNext ), #end#end#end) VALUES (#foreach ($field in $fields)#if($field.name != "id")?#if( $foreach.hasNext ), #end#end#end)"""
#if ($hasIdColumn)
        private const val SQL_SELECT_BY_ID = """SELECT #foreach ($field in $fields)"$field.name"#if( $foreach.hasNext ), #end#end FROM "$table_name" WHERE id = ?"""
#end
        private const val SQL_SELECT_ALL = """SELECT #foreach ($field in $fields)"$field.name"#if( $foreach.hasNext ), #end#end FROM "$table_name""""
#if ($hasIdColumn)
        private const val SQL_UPDATE = """UPDATE "$table_name" SET #foreach ($field in $fields)#if($field.name != "id")"$field.name" = ?#if( $foreach.hasNext ), #end#end#end WHERE id = ?"""
#if ($addPaginationMethods)
        private const val SQL_SELECT_ID_GREATER = """SELECT #foreach ($field in $fields)"$field.name"#if( $foreach.hasNext ), #end#end FROM "$table_name" WHERE id > ? LIMIT ?"""
        private const val SQL_SELECT_ID_LOWER = """SELECT #foreach ($field in $fields)"$field.name"#if( $foreach.hasNext ), #end#end FROM "$table_name" WHERE id < ? LIMIT ?"""
        private const val SQL_SELECT_LAST = """SELECT #foreach ($field in $fields)"$field.name"#if( $foreach.hasNext ), #end#end FROM "$table_name" ORDER BY id DESC LIMIT ?"""
#end
        private const val SQL_COUNT = """SELECT COUNT(id) FROM "$table_name""""
#end
#if ($hasIdColumn)
        private const val SQL_DELETE = """DELETE FROM "$table_name" WHERE id = ?"""
#end
        private const val SQL_DELETE_ALL = """DELETE FROM "$table_name""""
    }

    @Throws(SQLException::class)
    override fun createNew(dbc: Connection, #foreach ($field in $fields)#if($field.codeName != "id")$field.codeName: #include("${_dir}${field.type}.vm")#if(${field.izNullable})?#end#if( $foreach.hasNext ), #end#end#end) : $class_name {
        dbc.prepareStatement(SQL_INSERT, Statement.RETURN_GENERATED_KEYS).use {
#foreach ($field in $fields)
    #if($hasIdColumn)#set($index = $foreach.count - 1)#if ($field.name != "id")
            it.setValue($index, $field.codeName)
    #end#else
            it.setValue($foreach.count, $field.codeName)
        #end
    #end
            it.executeUpdate()
            it.generatedKeys.use {
                it.next()
                return $class_name(
#if ($hasIdColumn)
    #if ($idColumnType == $int)
                        #if ($createValueClassForId)${class_name}Id(it.getInt(1))#{else}it.getInt(1)#end,
    #else
                        #if ($createValueClassForId)${class_name}Id(it.getLong(1))#{else}it.getLong(1)#end,
    #end
#end
#foreach ($field in $fields)#if($field.codeName != "id")
                    $field.codeName#if( $foreach.hasNext ), #end

#end#end
                )
            }
        }
    }
#if ($hasIdColumn)

    @Throws(SQLException::class)
    override fun loadById(dbc: Connection, id: #if ($createValueClassForId)${class_name}Id#else#if ($idColumnType == $int)Int#{else}Long#end#end) : $class_name? {
        dbc.prepareStatement(SQL_SELECT_BY_ID).use {
            #if ($createValueClassForId)it.setValue(1, id.value)#{else}it.setValue(1, id)#end

            it.executeQuery().use {
                return if (it.next()) {
                    objectFromResultSet(it)
                } else {
                    null
                }
            }
        }
    }
#end

    @Throws(SQLException::class)
    override fun loadAll(dbc: Connection) : List<$class_name> {
        val ret = mutableListOf<$class_name>()
        dbc.prepareStatement(SQL_SELECT_ALL).use {
            it.executeQuery().use {
                while (it.next()) {
                    ret.add(objectFromResultSet(it))
                }
            }
        }

        return ret
    }
#if ($hasIdColumn)


    @Throws(SQLException::class)
    override fun update(dbc: Connection, #foreach ($field in $fields)#if($field.codeName != "id")$field.codeName: #include("${_dir}${field.type}.vm")#if(${field.izNullable})?#end#if( $foreach.hasNext ), #end#end#end, id: #if ($createValueClassForId)${class_name}Id#else#if ($idColumnType == $int)Int#{else}Long#end#end) : $class_name? {
        dbc.prepareStatement(SQL_UPDATE).use {
#foreach ($field in $fields)#if($hasIdColumn && $field.codeName != "id")#set($index = $foreach.count - 1)
            it.setValue($index, $field.codeName)
#end#end
#set($index = $index + 1)
            #if ($createValueClassForId)it.setValue($index, id.value)#{else}it.setValue($index, id)#end

            return if (it.executeUpdate() > 0) {
                return $class_name(
                    id,
#foreach ($field in $fields)#if($field.codeName != "id")
                    $field.codeName#if( $foreach.hasNext ), #end

#end#end
                )
            } else {
                null
            }
        }
    }

#if ($addPaginationMethods)
    @Throws(SQLException::class)
    override fun loadPageIdGreater(dbc: Connection, idGreater: #if ($createValueClassForId)${class_name}Id#else#if ($idColumnType == $int)Int#{else}Long#end#end, pageSize: Int): List<$class_name> {
        if (pageSize <= 0) {
            throw IllegalArgumentException("pageSize <= 0")
        }

        dbc.prepareStatement(SQL_SELECT_ID_GREATER).use {
            #if ($createValueClassForId)it.setValue(1, idGreater.value)#{else}it.setValue(1, idGreater)#end

            it.setValue(2, pageSize)

            it.executeQuery().use {
                val ret = mutableListOf<$class_name>()

                while (it.next()) {
                    ret.add(objectFromResultSet(it))
                }

                return ret
            }
        }
    }


    @Throws(SQLException::class)
    override fun loadPageIdLower(dbc: Connection, idLower: #if ($createValueClassForId)${class_name}Id#else#if ($idColumnType == $int)Int#{else}Long#end#end, pageSize: Int): List<$class_name> {
        if (pageSize <= 0) {
            throw IllegalArgumentException("pageSize <= 0")
        }

        dbc.prepareStatement(SQL_SELECT_ID_LOWER).use {
            #if ($createValueClassForId)it.setValue(1, idLower.value)#{else}it.setValue(1, idLower)#end

            it.setValue(2, pageSize)

            it.executeQuery().use {
                val ret = mutableListOf<$class_name>()

                while (it.next()) {
                    ret.add(objectFromResultSet(it))
                }

                return ret
            }
        }
    }

    @Throws(SQLException::class)
    override fun loadLastPage(dbc: Connection, pageSize: Int): List<$class_name> {
        val ret = mutableListOf<$class_name>()
        dbc.prepareStatement(SQL_SELECT_LAST).use {
            it.setValue(1, pageSize)

            it.executeQuery().use {
                while (it.next()) {
                    ret.add(objectFromResultSet(it))
                }
            }
        }

        return ret
    }
#end

    @Throws(SQLException::class)
    override fun count(dbc: Connection) : Int {
        dbc.prepareStatement(SQL_COUNT).use {
            it.executeQuery().use {
                it.next()
                return it.getInt(1)
            }
        }
    }

    @Throws(SQLException::class)
    override fun delete(dbc: Connection, id: #if ($createValueClassForId)${class_name}Id#else#if ($idColumnType == $int)Int#{else}Long#end#end) : Int {
        dbc.prepareStatement(SQL_DELETE).use {
            #if ($createValueClassForId)it.setValue(1, id.value)#{else}it.setValue(1, id)#end

            return it.executeUpdate()
        }
    }
#end


    @Throws(SQLException::class)
    override fun deleteAll(dbc: Connection) : Int {
        dbc.prepareStatement(SQL_DELETE_ALL).use {
            return it.executeUpdate()
        }
    }

    private fun objectFromResultSet(rs: ResultSet): $class_name {
        return $class_name(
        #foreach ($field in $fields)#set($index = $foreach.count)
        #if ($field.codeName != "id")
        rs.#parse("${_dir}${field.type}_get.vm")#if( $foreach.hasNext ), #end
        #else
            #if ($idColumnType == $int)
            #if ($createValueClassForId)${class_name}Id(rs.getInt(1)),#{else}rs.getInt(1),#end
            #else
            #if ($createValueClassForId)${class_name}Id(rs.getLong(1)),#{else}rs.getLong(1),#end
            #end
        #end

        #end
        )
    }
}