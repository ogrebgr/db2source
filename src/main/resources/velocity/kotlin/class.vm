import java.sql.Connection
import java.sql.SQLException
import java.sql.Statement


data class $class_name(
#foreach ($field in $fields)
val $field.name: #include("${_dir}${field.type}.vm")#if( $foreach.hasNext ), #end

#end
)

// TODO add provider to Dagger DI
interface ${class_name}Dbh {
@Throws(SQLException::class)
fun createNew(dbc: Connection, #foreach ($field in $fields)#if($field.name != "id")$field.name: #include("${_dir}${field.type}.vm")#if( $foreach.hasNext ), #end#end#end) : $class_name

@Throws(SQLException::class)
fun loadById(dbc: Connection, id: Int) : $class_name?

@Throws(SQLException::class)
fun loadAll(dbc: Connection) : List<$class_name>

@Throws(SQLException::class)
fun update(dbc: Connection, obj: $class_name) : Boolean

@Throws(SQLException::class)
fun loadPageIdGreater(dbc: Connection, idGreater: Long, pageSize: Int): List<$class_name>

@Throws(SQLException::class)
fun loadLastPage(dbc: Connection, idGreater: Long, pageSize: Int): List<$class_name>

@Throws(SQLException::class)
fun count(dbc: Connection) : Int

@Throws(SQLException::class)
fun delete(dbc: Connection, id: Long) : Int
}

class ${class_name}DbhImpl : ${class_name}Dbh{
private val SQL_INSERT = """INSERT INTO "$table_name" (#foreach ($field in $fields)#if($field.name != "id")"$field.name"#if( $foreach.hasNext ), #end#end#end) VALUES (#foreach ($field in $fields)#if($field.name != "id")?#if( $foreach.hasNext ), #end#end#end)"""
private val SQL_SELECT_BY_ID = """SELECT (#foreach ($field in $fields)#if($field.name != "id")"$field.name"#if( $foreach.hasNext ), #end#end#end) FROM "$table_name" WHERE id = ?"""
private val SQL_SELECT_ALL = """SELECT (#foreach ($field in $fields)"$field.name"#if( $foreach.hasNext ), #end#end) FROM "$table_name""""
private val SQL_UPDATE = """UPDATE "$table_name" SET (#foreach ($field in $fields)#if($field.name != "id")"$field.name" = ?#if( $foreach.hasNext ), #end#end#end WHERE id = ?"""
private val SQL_SELECT_ID_GREATER = """SELECT (#foreach ($field in $fields)"$field.name"#if( $foreach.hasNext ), #end#end) FROM "$table_name" WHERE id > ?"""
private val SQL_SELECT_LAST = """SELECT (#foreach ($field in $fields)"$field.name"#if( $foreach.hasNext ), #end#end) FROM "$table_name" ORDER BY id DESC"""
private val SQL_COUNT = """SELECT COUNT(id) FROM "$table_name""""
private val SQL_DELETE = """DELETE FROM "$table_name" WHERE id = ?"""

@Throws(SQLException::class)
override fun createNew(dbc: Connection, #foreach ($field in $fields)#if($field.name != "id")$field.name: #include("${_dir}${field.type}.vm")#if( $foreach.hasNext ), #end#end#end) : $class_name {
dbc.prepareStatement(SQL_INSERT, Statement.RETURN_GENERATED_KEYS).use {
#foreach ($field in $fields)#if($field.name != "id")#set($index = $foreach.count - 1)
it.setValue($index, $field.name)
#end#end

it.executeUpdate()
it.generatedKeys.use {
it.next()
return $class_name(
it.getInt(1),
#foreach ($field in $fields)#if($field.name != "id")
$field.name#if( $foreach.hasNext ), #end

#end#end
)
}
}
}


@Throws(SQLException::class)
override fun loadById(dbc: Connection, id: Int) : $class_name? {
dbc.prepareStatement(SQL_SELECT_BY_ID).use {
it.setValue(1, id)

it.executeQuery().use {
return if (it.next()) {
$class_name(
id,
#foreach ($field in $fields)#if($field.name != "id")#set($index = $foreach.count - 1)
it.#parse("${_dir}${field.type}_get.vm")#if( $foreach.hasNext ), #end

#end#end
)
} else {
null
}
}
}
}

@Throws(SQLException::class)
override fun loadAll(dbc: Connection) : List<$class_name> {
val ret = ArrayList<$class_name>()
dbc.prepareStatement(SQL_SELECT_ALL).use {
it.executeQuery().use {
while (it.next()) {
ret.add($class_name(
#foreach ($field in $fields)#set($index = $foreach.count)
it.#parse("${_dir}${field.type}_get.vm")#if( $foreach.hasNext ), #end

#end
))
}
}
}

return ret
}

@Throws(SQLException::class)
override fun update(dbc: Connection, obj: $class_name) : Boolean {
dbc.prepareStatement(SQL_UPDATE).use {
#foreach ($field in $fields)#if($field.name != "id")#set($index = $foreach.count - 1)
it.setValue($index, obj.$field.name)
#end#end
#set($index = $index + 1)
it.setValue($index, obj.id)

return it.executeUpdate() > 0
}
}

@Throws(SQLException::class)
override fun loadPageIdGreater(dbc: Connection, idGreater: Long, pageSize: Int): List<$class_name> {
if (pageSize <= 0) {
throw IllegalArgumentException("pageSize <= 0")
}

dbc.prepareStatement(SQL_SELECT_ID_GREATER).use {
it.setValue(1, idGreater)

it.executeQuery().use {
var count = 0
val ret = ArrayList<$class_name>()

while (it.next()) {
ret.add($class_name(
#foreach ($field in $fields)#set($index = $foreach.count)
it.#parse("${_dir}${field.type}_get.vm")#if( $foreach.hasNext ), #end

#end
))
count++
if (count == pageSize) {
return ret
}
}

return ret
}
}
}

@Throws(SQLException::class)
override fun loadLastPage(dbc: Connection, idGreater: Long, pageSize: Int): List<$class_name> {
val ret = ArrayList<$class_name>()
dbc.prepareStatement(SQL_SELECT_LAST).use {
it.executeQuery().use {
var count = 0
while (it.next()) {
ret.add($class_name(
#foreach ($field in $fields)#set($index = $foreach.count)
it.#parse("${_dir}${field.type}_get.vm")#if( $foreach.hasNext ), #end

#end
))
count++
if (count == pageSize) {
return ret
}
}
}
}

return ret
}

@Throws(SQLException::class)
override fun count(dbc: Connection) : Int {
dbc.prepareStatement(SQL_COUNT).use {
it.executeQuery().use {
it.next()
return it.getInt(1)
}
}
}

@Throws(SQLException::class)
override fun delete(dbc: Connection, id: Long) : Int {
dbc.prepareStatement(SQL_DELETE).use {
it.setValue(1, id)
return it.executeUpdate()
}
}
}