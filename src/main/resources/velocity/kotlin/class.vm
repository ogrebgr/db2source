import java.sql.Connection
import java.sql.SQLException
import java.sql.Statement


data class $class_name(
#foreach ($field in $fields)
    val $field.codeName: #include("${_dir}${field.type}.vm")#if(${field.izNullable})?#end#if( $foreach.hasNext ), #end

#end
)

// TODO add provider to Dagger DI
interface ${class_name}Dbh {
    @Throws(SQLException::class)
    fun createNew(dbc: Connection, #foreach ($field in $fields)#if($field.codeName != "id")$field.codeName: #include("${_dir}${field.type}.vm")#if(${field.izNullable})?#end#if( $foreach.hasNext ), #end#end#end) : $class_name
#if ($hasIdColumn)
#set($int = "INT")
@Throws(SQLException::class)
#if ($idColumnType == $int)
    fun loadById(dbc: Connection, id: Int) : $class_name?
#else
    fun loadById(dbc: Connection, id: Long) : $class_name?
#end
#end
    @Throws(SQLException::class)
    fun loadAll(dbc: Connection) : List<$class_name>
#if ($hasIdColumn)

    @Throws(SQLException::class)
    fun update(dbc: Connection, obj: $class_name) : Boolean

    @Throws(SQLException::class)
    fun loadPageIdGreater(dbc: Connection, idGreater: Int, pageSize: Int): List<$class_name>

    @Throws(SQLException::class)
    fun loadPageIdLower(dbc: Connection, idLower: Int, pageSize: Int): List<$class_name>

    @Throws(SQLException::class)
    fun loadLastPage(dbc: Connection, pageSize: Int): List<$class_name>

    @Throws(SQLException::class)
    fun count(dbc: Connection) : Int

    @Throws(SQLException::class)
    fun delete(dbc: Connection, id: Int) : Int
#end
    @Throws(SQLException::class)
    fun deleteAll(dbc: Connection) : Int
}

class ${class_name}DbhImpl : ${class_name}Dbh{
    companion object {
        private const val SQL_INSERT = """INSERT INTO "$table_name" (#foreach ($field in $fields)#if($field.name != "id")"$field.name"#if( $foreach.hasNext ), #end#end#end) VALUES (#foreach ($field in $fields)#if($field.name != "id")?#if( $foreach.hasNext ), #end#end#end)"""
#if ($hasIdColumn)
        private const val SQL_SELECT_BY_ID = """SELECT #foreach ($field in $fields)#if($field.name != "id")"$field.name"#if( $foreach.hasNext ), #end#end#end FROM "$table_name" WHERE id = ?"""
#end
        private const val SQL_SELECT_ALL = """SELECT #foreach ($field in $fields)"$field.name"#if( $foreach.hasNext ), #end#end FROM "$table_name""""
#if ($hasIdColumn)
        private const val SQL_UPDATE = """UPDATE "$table_name" SET #foreach ($field in $fields)#if($field.name != "id")"$field.name" = ?#if( $foreach.hasNext ), #end#end#end WHERE id = ?"""
        private const val SQL_SELECT_ID_GREATER = """SELECT #foreach ($field in $fields)"$field.name"#if( $foreach.hasNext ), #end#end FROM "$table_name" WHERE id > ?"""
        private const val SQL_SELECT_ID_LOWER = """SELECT #foreach ($field in $fields)"$field.name"#if( $foreach.hasNext ), #end#end FROM "$table_name" WHERE id < ?"""
        private const val SQL_SELECT_LAST = """SELECT #foreach ($field in $fields)"$field.name"#if( $foreach.hasNext ), #end#end FROM "$table_name" ORDER BY id DESC"""
#end
#if ($hasIdColumn)
        private const val SQL_DELETE = """DELETE FROM "$table_name" WHERE id = ?"""
#else
        private const val SQL_DELETE = """DELETE FROM "$table_name" WHERE colname = ?"""
#end
        private const val SQL_DELETE_ALL = """DELETE FROM "$table_name""""
    }

    @Throws(SQLException::class)
    override fun createNew(dbc: Connection, #foreach ($field in $fields)#if($field.codeName != "id")$field.codeName: #include("${_dir}${field.type}.vm")#if(${field.izNullable})?#end#if( $foreach.hasNext ), #end#end#end) : $class_name {
        dbc.prepareStatement(SQL_INSERT, Statement.RETURN_GENERATED_KEYS).use {
#foreach ($field in $fields)#if($hasIdColumn && $field.name != "id")#set($index = $foreach.count - 1)
            it.setValue($index, $field.codeName)
#end#end

            it.executeUpdate()
            it.generatedKeys.use {
                it.next()
                return $class_name(
#if ($hasIdColumn && $idColumnType == $int)
                    it.getInt(1),
#else
                    it.getLong(1),
#end
#foreach ($field in $fields)#if($field.codeName != "id")
                    $field.codeName#if( $foreach.hasNext ), #end

#end#end
                )
            }
        }
    }
#if ($hasIdColumn)

    @Throws(SQLException::class)
#if ($idColumnType == $int)
    override fun loadById(dbc: Connection, id: Int) : $class_name? {
#else
    override fun loadById(dbc: Connection, id: Long) : $class_name? {
#end
        dbc.prepareStatement(SQL_SELECT_BY_ID).use {
            it.setValue(1, id)

            it.executeQuery().use {
                return if (it.next()) {
                    $class_name(
                        id,
#foreach ($field in $fields)#if($hasIdColumn && $field.name != "id")#set($index = $foreach.count - 1)
                        it.#parse("${_dir}${field.type}_get.vm")#if( $foreach.hasNext ), #end

#end#end
                    )
                } else {
                    null
                }
            }
        }
    }
#end

    @Throws(SQLException::class)
    override fun loadAll(dbc: Connection) : List<$class_name> {
        val ret = mutableListOf<$class_name>()
        dbc.prepareStatement(SQL_SELECT_ALL).use {
            it.executeQuery().use {
                while (it.next()) {
                    ret.add($class_name(
#foreach ($field in $fields)#set($index = $foreach.count)
                        it.#parse("${_dir}${field.type}_get.vm")#if( $foreach.hasNext ), #end

#end
                    ))
                }
            }
        }

        return ret
    }
#if ($hasIdColumn)


    @Throws(SQLException::class)
    override fun update(dbc: Connection, obj: $class_name) : Boolean {
        dbc.prepareStatement(SQL_UPDATE).use {
#foreach ($field in $fields)#if($hasIdColumn && $field.codeName != "id")#set($index = $foreach.count - 1)
            it.setValue($index, obj.$field.codeName)
#end#end
#set($index = $index + 1)
            it.setValue($index, obj.id)

            return it.executeUpdate() > 0
        }
    }

    @Throws(SQLException::class)
    override fun loadPageIdGreater(dbc: Connection, idGreater: Int, pageSize: Int): List<$class_name> {
        if (pageSize <= 0) {
            throw IllegalArgumentException("pageSize <= 0")
        }

        dbc.prepareStatement(SQL_SELECT_ID_GREATER).use {
            it.setValue(1, idGreater)

            it.executeQuery().use {
                var count = 0
                val ret = mutableListOf<$class_name>()

                while (it.next()) {
                    ret.add($class_name(
#foreach ($field in $fields)#set($index = $foreach.count)
                        it.#parse("${_dir}${field.type}_get.vm")#if( $foreach.hasNext ), #end

#end
                    ))
                    count++
                    if (count == pageSize) {
                        return ret
                    }
                }

                return ret
            }
        }
    }


    @Throws(SQLException::class)
    override fun loadPageIdLower(dbc: Connection, idLower: Int, pageSize: Int): List<$class_name> {
        if (pageSize <= 0) {
            throw IllegalArgumentException("pageSize <= 0")
        }

        dbc.prepareStatement(SQL_SELECT_ID_LOWER).use {
            it.setValue(1, idLower)

            it.executeQuery().use {
                var count = 0
                val ret = mutableListOf<$class_name>()

                while (it.next()) {
                    ret.add($class_name(
#foreach ($field in $fields)#set($index = $foreach.count)
                        it.#parse("${_dir}${field.type}_get.vm")#if( $foreach.hasNext ), #end

#end
                    ))
                    count++
                    if (count == pageSize) {
                        return ret
                    }
                }

                return ret
            }
        }
    }

    @Throws(SQLException::class)
    override fun loadLastPage(dbc: Connection, pageSize: Int): List<$class_name> {
        val ret = mutableListOf<$class_name>()
        dbc.prepareStatement(SQL_SELECT_LAST).use {
            it.executeQuery().use {
                var count = 0
                while (it.next()) {
                    ret.add($class_name(
#foreach ($field in $fields)#set($index = $foreach.count)
                        it.#parse("${_dir}${field.type}_get.vm")#if( $foreach.hasNext ), #end

#end
                    ))
                    count++
                    if (count == pageSize) {
                        return ret
                    }
                }
            }
        }

        return ret
    }

    @Throws(SQLException::class)
    override fun count(dbc: Connection) : Int {
        dbc.prepareStatement(SQL_COUNT).use {
            it.executeQuery().use {
                it.next()
                return it.getInt(1)
            }
        }
    }

    @Throws(SQLException::class)
    override fun delete(dbc: Connection, id: Int) : Int {
        dbc.prepareStatement(SQL_DELETE).use {
            it.setValue(1, id)
            return it.executeUpdate()
        }
    }
#end


    @Throws(SQLException::class)
    override fun deleteAll(dbc: Connection) : Int {
        dbc.prepareStatement(SQL_DELETE_ALL).use {
            return it.executeUpdate()
        }
    }
}